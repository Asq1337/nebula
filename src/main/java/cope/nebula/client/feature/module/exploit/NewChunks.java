package cope.nebula.client.feature.module.exploit;

import cope.nebula.client.events.PacketEvent;
import cope.nebula.client.events.PacketEvent.Direction;
import cope.nebula.client.feature.module.Module;
import cope.nebula.client.feature.module.ModuleCategory;
import cope.nebula.util.internal.math.Vec2d;
import cope.nebula.util.world.RaycastUtil;
import net.minecraft.client.renderer.BufferBuilder;
import net.minecraft.client.renderer.GlStateManager;
import net.minecraft.client.renderer.Tessellator;
import net.minecraft.client.renderer.entity.RenderManager;
import net.minecraft.client.renderer.vertex.DefaultVertexFormats;
import net.minecraft.network.play.server.SPacketChunkData;
import net.minecraft.util.math.AxisAlignedBB;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;

import java.awt.*;
import java.util.Set;
import java.util.concurrent.CopyOnWriteArraySet;

import static org.lwjgl.opengl.GL11.*;

public class NewChunks extends Module {
    public NewChunks() {
        super("NewChunks", ModuleCategory.EXPLOIT, "Renders newly generated chunks");
    }

    private final Set<Vec2d> chunks = new CopyOnWriteArraySet<>();

    @Override
    public String getDisplayInfo() {
        return String.valueOf(chunks.size());
    }

    @Override
    protected void onDeactivated() {
        chunks.clear();
    }

    @Override
    public void onRender3d() {
        chunks.forEach((chunk) -> {
            AxisAlignedBB box = new AxisAlignedBB(chunk.getX(), 0.0, chunk.getZ(), chunk.getX() + 16.0, 0.0, chunk.getZ() + 16.0);
            RenderManager renderManager = mc.getRenderManager();

            if (RaycastUtil.isInFrustum(box)) {
                GlStateManager.pushMatrix();

                GlStateManager.translate(chunk.getX() - renderManager.viewerPosX, -renderManager.viewerPosY, chunk.getZ() - renderManager.viewerPosZ);

                GlStateManager.tryBlendFuncSeparate(770, 771, 0, 1);
                GlStateManager.disableTexture2D();
                GlStateManager.disableDepth();
                GlStateManager.depthMask(false);

                glEnable(GL_LINE_SMOOTH);
                glHint(GL_LINE_SMOOTH_HINT, GL_NICEST);

                GlStateManager.glLineWidth(1.5f);

                int color = new Color(122, 49, 183).getRGB();

                float alpha = (color >> 24 & 0xff) / 255f;
                float red = (color >> 16 & 0xff) / 255f;
                float green = (color >> 8 & 0xff) / 255f;
                float blue = (color & 0xff) / 255f;

                Tessellator tessellator = Tessellator.getInstance();
                BufferBuilder buffer = tessellator.getBuffer();

                buffer.begin(GL_LINE_STRIP, DefaultVertexFormats.POSITION_COLOR);
                buffer.pos(0.0, 0.0, 0.0).color(red, green, blue, alpha).endVertex();
                buffer.pos(16.0, 0.0, 0.0).color(red, green, blue, alpha).endVertex();
                buffer.pos(16.0, 0.0, 16.0).color(red, green, blue, alpha).endVertex();
                buffer.pos(0.0, 0.0, 16.0).color(red, green, blue, alpha).endVertex();
                tessellator.draw();

                GlStateManager.glLineWidth(1.0f);
                glDisable(GL_LINE_SMOOTH);

                GlStateManager.depthMask(true);
                GlStateManager.enableDepth();
                GlStateManager.enableTexture2D();
                GlStateManager.disableBlend();

                GlStateManager.popMatrix();
            }
        });
    }

    @SubscribeEvent
    public void onPacket(PacketEvent event) {
        if (event.getDirection().equals(Direction.INCOMING) && event.getPacket() instanceof SPacketChunkData) {
            SPacketChunkData packet = event.getPacket();

            if (!packet.isFullChunk()) {
                chunks.add(new Vec2d(packet.getChunkX() * 16.0, packet.getChunkZ() * 16.0));
            }
        }
    }
}
