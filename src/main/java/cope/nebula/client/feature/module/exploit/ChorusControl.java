package cope.nebula.client.feature.module.exploit;

import cope.nebula.client.events.ItemUsedEvent;
import cope.nebula.client.events.PacketEvent;
import cope.nebula.client.feature.module.Module;
import cope.nebula.client.feature.module.ModuleCategory;
import cope.nebula.util.renderer.RenderUtil;
import net.minecraft.init.Items;
import net.minecraft.network.play.client.CPacketConfirmTeleport;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.server.SPacketPlayerPosLook;
import net.minecraft.util.math.AxisAlignedBB;
import net.minecraft.util.math.BlockPos;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;

public class ChorusControl extends Module {
    public ChorusControl() {
        super("ChorusControl", ModuleCategory.EXPLOIT, "Controls when a chorus fruit will teleport you server-side");
    }

    private SPacketPlayerPosLook packet;
    private boolean consumed = false;

    @Override
    protected void onDeactivated() {
        packet = null;
        consumed = false;
    }

    @Override
    public String getDisplayInfo() {
        return consumed ? "Ready" : super.getDisplayInfo();
    }

    @Override
    public void onTick() {
        if (consumed && mc.gameSettings.keyBindSneak.isKeyDown()) {
            packet = null;
            consumed = false;
        }

        if (packet != null && !consumed) {
            mc.player.connection.handlePlayerPosLook(packet);
            packet = null;
            consumed = false;
        }
    }

    @Override
    public void onRender3d() {
        if (packet != null && consumed) {
            // TODO render player model
            AxisAlignedBB box = new AxisAlignedBB(new BlockPos(packet.getX(), packet.getY(), packet.getZ())).offset(-mc.getRenderManager().viewerPosX, -mc.getRenderManager().viewerPosY, -mc.getRenderManager().viewerPosZ);
            RenderUtil.renderFilledBox(box, RenderUtil.fromRGBA(255, 0, 0, 80));
        }
    }

    @SubscribeEvent
    public void onItemUsed(ItemUsedEvent event) {
        if (event.getEntityLiving().equals(mc.player) && event.getStack().getItem().equals(Items.CHORUS_FRUIT)) {
            consumed = true;
        }
    }

    @SubscribeEvent
    public void onPacket(PacketEvent event) {
        switch (event.getDirection()) {
            case INCOMING: {
                if (event.getPacket() instanceof SPacketPlayerPosLook) {
                    packet = event.getPacket();
                    event.setCanceled(true);
                }
                break;
            }

            case OUTGOING: {
                if (event.getPacket() instanceof CPacketPlayer || event.getPacket() instanceof CPacketConfirmTeleport) {
                    event.setCanceled(consumed);
                }
                break;
            }
        }
    }
}
